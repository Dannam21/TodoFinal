org: dannamendez
service: api-resenia

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 1024
  timeout: 30
  iam:
    role: arn:aws:iam::385301667309:role/LabRole
  environment:
    TABLE_NAME: ${sls:stage}-t_resenias

functions:
  crear:
    handler: resenia.crearResenia
    events:
      - http:
          path: /resenia/crear
          method: post
          cors: true
          integration: lambda

resources:
  Resources:
    TablaResenias:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLE_NAME}
        AttributeDefinitions:
          # Definimos todos los atributos usados en el KeySchema
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: producto_id
            AttributeType: S
          - AttributeName: resenia_id
            AttributeType: S
          - AttributeName: fecha
            AttributeType: S
          # tenant_producto_id no es un atributo físico, lo concatenamos en la Lambda
        KeySchema:
          - AttributeName: tenant_id_producto_id
            KeyType: HASH  # La clave de partición será la combinación de tenant_id + producto_id
          - AttributeName: resenia_id
            KeyType: RANGE  # La clave de ordenamiento será resenia_id
        BillingMode: PAY_PER_REQUEST
        LocalSecondaryIndexes:
          - IndexName: FechaIndex
            KeySchema:
              - AttributeName: tenant_id_producto_id
                KeyType: HASH
              - AttributeName: fecha
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        GlobalSecondaryIndexes:
          - IndexName: UsuarioIndex
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: usuario_id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: true
