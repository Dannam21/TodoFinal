org: ${env:ORG}
service: api-usuarios
provider:
  name: aws
  runtime: python3.12
  memorySize: 1024
  timeout: 30
  iam:
    role: ${env:IAM_ROLE_ARN}
  environment:
    USERS_TABLE: ${sls:stage}-usuarios
    TOKENS_TABLE: ${sls:stage}-t_tokens_acceso
    VALIDAR_TOKEN_LAMBDA_NAME: ${self:service}-${sls:stage}-ValidarTokenAcceso

      
functions:
  createUsuario:
    handler: create_usuarios.lambda_handler
    events:
      - http:
          path: usuarios/create
          method: post
          cors:
            allowedOrigins:
              - '*'  # Permite cualquier origen
            allowedHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowedMethods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE
            allowCredentials: false

  deleteUsuario:
    handler: delete_usuarios.lambda_handler
    events:
      - http:
          path: usuarios/delete
          method: delete
          cors:
            allowedOrigins:
              - '*'  # Permite cualquier origen
            allowedHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowedMethods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE
            allowCredentials: false


  getUsuario:
    handler: get_usuarios.lambda_handler
    events:
      - http:
          path: usuarios/get
          method: get
          cors:
            allowedOrigins:
              - '*'  # Permite cualquier origen
            allowedHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowedMethods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE
            allowCredentials: false

  loginUsuario:
    handler: login_usuarios.lambda_handler
    events:
      - http:
          path: usuarios/login
          method: post
          cors:
            allowedOrigins:
              - '*'  # Permite cualquier origen
            allowedHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowedMethods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE
            allowCredentials: false

  updateUsuario:
    handler: update_usuarios.lambda_handler
    events:
      - http:
          path: usuarios/update
          method: put
          cors:
            allowedOrigins:
              - '*'  # Permite cualquier origen
            allowedHeaders:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
            allowedMethods:
              - OPTIONS
              - GET
              - POST
              - PUT
              - DELETE
            allowCredentials: false

  ValidarTokenAcceso:
    handler: ValidarTokenAcceso.lambda_handler
    events:
      - http:
          path: usuarios/validar-token
          method: get

resources:
  Resources:
    UsuariosDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: tenant_id
            AttributeType: S
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: tenant_id
            KeyType: HASH
          - AttributeName: user_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        LocalSecondaryIndexes:
          - IndexName: BusquedaPorEmail
            KeySchema:
              - AttributeName: tenant_id
                KeyType: HASH
              - AttributeName: email
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    TokensAccesoDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName:  ${self:provider.environment.TOKENS_TABLE}
        AttributeDefinitions:
          - AttributeName: token
            AttributeType: S
        KeySchema:
          - AttributeName: token
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5